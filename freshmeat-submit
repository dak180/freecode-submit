#!/usr/bin/env python
#
# freshmeat-submit -- script transactions with the Freshmeat server

import sys

def error(m):
    sys.stderr.write("freshmeat-submit: %s\n" % m)
    sys.stderr.flush()
    sys.exit(1)

if sys.version[:6] < '2.2.0':
    error("You must upgrade to Python 2.2.0 or better to use this code.")

import urllib2, json, netrc, email.Parser, optparse, commands

class FreshmeatSessionException:
    def __init__(self, msg):
        self.msg = msg

class FreshmeatSession:
    "Encapsulate the state of a Freshmeat API session."
    freshmeat_api = "http://freshmeat.net/projects/%s.json"

    def __init__(self, auth=None, verbose=0):
        "Initialize Freshmeat session credentials."
        self.verbose = verbose
        self.auth = auth
        # If user didn't supply credentials, fetch from ~/.netrc
        if not self.auth:
            try:
                credentials = netrc.netrc()
            except netrc.NetrcParseError, e:
                raise FreshmeatSessionException("ill-formed .netrc: %s:%s %s" \
                                               % (e.filename, e.lineno, e.msg))
            except IOError, e:
                raise FreshmeatSessionException(("missing .netrc file %s" % \
                                                 str(e).split()[-1]))
            ret = credentials.authenticators("freshmeat")
            if not ret:
                raise FreshmeatSessionException("no credentials for Freshmeat")
            login, self.account, password = ret

    def publish_release(self, data):
        "Add a new release to the current project."
        pass

    def withdraw_release(self, release):
        "Withdraw a specified release from the current project."
        pass

focus_values = (
    "Initial freshmeat announcement",
    "Documentation",
    "Code cleanup",
    "Minor feature enhancements",
    "Major feature enhancements"
    "Minor bugfixes",
    "Major bugfixes",
    "Minor security fixes",
    "Major security fixes",
)

# Note: Release Focus is no longer a real Freshmeat field; we'll remap it later.
freshmeat_field_map = (
    ("Project",          "p", "name"),
    ("Version",          "v", "version"),
    ("Changes",          "c", "changelog"),
    ("Hide",             "x", "hide_from_frontpage"),
    ("Release-Focus",    "r", "release_focus"),
    ("Tag-List",         "t", "tag_list"),
    ("License-List",     "l", "license_list"),
    )

def get_rpm_field(fld, rpm):
    cmd = "rpm --queryformat='%%{%s}' -qp %s" % (fld, rpm)
    (status, output) = commands.getstatusoutput(cmd)
    if status != 0:
        raise ValueError
    return output

def crack_rpm(rpm, meta, urls):
    "Extract freshmeat metadata from an RPM."
    try:
        # Some fields can be copied literally if present.
        if not "name" in meta:
            meta["name"] = get_rpm_field("name", rpm)
        if not "version" in meta:
            meta["version"] = get_rpm_field("version", rpm)
        # This doesn't work.  The values don't map over.
        #if not "license" in meta:
        #    meta["license"] = get_rpm_field("license", rpm)
        if not "url_homepage" in meta:
            meta["url_homepage"] = get_rpm_field("url", rpm)
        if not "changes" in meta:
            # Querying gets you the first entry, apparently
            # blank-line-delimited.
            changes = get_rpm_field("changelogtext", rpm)
            # Canonicalize, stripping leading spaces.
            changes = map(lambda x: x.strip(), changes.split('\n'))
            changes = "\n".join(changes) + "\n"
            meta["changelog"] = changes 
        # RPMs have a source field; figure out which Freshmeat field it maps to
        source = get_rpm_field("source", rpm)
        if source.endswith(".tar.gz") or source.endswith(".tgz"):
            if "Tar/GZ" not in urls:
                urls["Tar/GZ"] = source
        if source.endswith(".tar.bz2"):
            if "Tar/BZ" not in urls:
                urls["Tar/BZ"] = source
    except ValueError:
        pass

class FreshmeatMetadataFactory:
    "Factory class for producing Metadata records"

    def __init__(self):
        self.message_parser = email.Parser.Parser()
        self.argument_parser = optparse.OptionParser( \
            usage="usage: %prog [options]")
        for (msg_field, shortopt, rpc_field) in freshmeat_field_map:
            self.argument_parser.add_option("-" + shortopt,
                                            "--" + msg_field.lower(),
                                            dest=rpc_field,
                                            help="Set the %s field"%msg_field)
        self.argument_parser.add_option('-d', '--delete', dest='delete',
                          default=False, action='store_true',
                          help='Suppress reading fields from stdin.')
        self.argument_parser.add_option('-n', '--no-stdin', dest='read',
                          default=True, action='store_false',
                          help='Suppress reading fields from stdin.')
        self.argument_parser.add_option('-N', '--noemit', dest='noemit',
                          default=False, action='store_true',
                          help='Suppress reading fields from stdin.')
        self.argument_parser.add_option('-V', '--verbose', dest='verbose',
                          default=False, action='store_true',
                          help='Enable verbose debugging.')
        
    def header_to_field(self, hdr):
        lhdr = hdr.lower().replace("-", "_")
        for (alias, shortopt, field) in freshmeat_field_map:
            if lhdr == alias.lower().replace("-", "_"):
                return field
        raise FreshmeatSessionException("Illegal field name %s" % hdr)

    def getMetadata(self, stream):
        "Make a JSON-like Python object describing an update."
        data = {}
        urls = {}
        (options, args) = self.argument_parser.parse_args()
        # First stuff from RPMs if present.
        for file in args:
            if file.endswith(".rpm"):
                crack_rpm(file, data, urls)
        # Second. stuff from stdin if present
        if options.read:
            message = self.message_parser.parse(stream)
            for (key, value) in message.items():
                if key.endswith("-URL"):
                    urls.update({key[:-4] : value})
                else:
                    data.update({self.header_to_field(key) : value})
            if not 'changes' in data:
                data['changes'] = message.get_payload()
        # Merge in options from the command line;
        # they override what's on stdin.
        data['verbose'] = False
        for (key, value) in options.__dict__.items():
            if key != 'read' and value != None:
                data[key] = value
        # Release-Focus field special handling
        if "release_focus" in data:
            if data["release_focus"] in '123456789':
                data["release_focus"] = focus_values[int(data["release_focus"])-1]
            if data["release_focus"] not in focus_values:
                raise FreshmeatSessionException("Invalid release focus")
            data["tag_list"] = data["release_focus" ]
            del data["release_focus"]
        # Now merge in the URLs
        data['approved_urls'] = map(lambda (k, v): {"label": k, "url": v}, urls.items())
        return data

if __name__ == "__main__":
    try:
        session = None
        # First, gather update data from stdin and command-line switches
        factory = FreshmeatMetadataFactory()
        data = factory.getMetadata(sys.stdin)
        # Some switches shouldn't be passed to the server
        verbose = data['verbose']; del data['verbose']
        delete = data['delete']; del data['delete']
        noemit = data['noemit']; del data['noemit']
        # Maybe we just want to sanity-check the send
        if noemit or verbose:
            print data
        # Time to ship the update.
        if not noemit:
            # Establish session
            if not session:
                session = FreshmeatSession(verbose=int(verbose))
            # OK, now actually add or delete the release.
            if delete:
                session.withdraw_release(data)
            else:
                session.publish_release(data)
    except FreshmeatSessionException, e:
        print >>sys.stderr,"freshmeat-submit:", e.msg
        sys.exit(1)
    except urllib2.URLError, f:
        print >>sys.stderr,"freshmeat-submit: URLError %s" %  (f.reason)
        sys.exit(1)
    except urllib2.HTTPError, f:
        print >>sys.stderr,"freshmeat-submit: HTTPError %s" %  (f.code)
        sys.exit(1)

# end

