<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC 
   "-//OASIS//DTD DocBook XML V4.1.2//EN"
   "docbook/docbookx.dtd">
<refentry id='freshmeat-submit.1'>
<refmeta>
<refentrytitle>freshmeat-submit</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class='source'>freshmeat-submit</refmiscinfo>
<refmiscinfo class='manual'>Development Tools</refmiscinfo>
<refmiscinfo class='date'>Oct 17 2010</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>freshmeat-submit</refname>
<refpurpose>submit release announcements and project metadata updates to freshmeat.net</refpurpose>
</refnamediv>
<refsynopsisdiv id='synopsis'>

<cmdsynopsis>
  <command>freshmeat-submit</command>
    <arg>-q</arg>
    <arg>-V</arg>
    <arg>-n</arg>
    <arg>-N</arg>
    <arg>-d</arg>
    <arg><replaceable>data-options</replaceable></arg>
    <arg rep='repeat'><replaceable>data-options</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<refsect1 id='description'><title>DESCRIPTION</title>

<para><application>freshmeat-submit</application> is a command-line tool
for submitting release announcements to freshmeat.net.  It is intended
for batch-mode operation in project release scripts, and designed so
that its input format can easily be generated by scripts.</para>

<para><application>freshmeat-submit</application> accepts release
information from a job card (an email-message-like data block on
standard input) or from command-line flags. Values set with
command-line flags override those collected from the job card. The
accumulated data is entered into the freshmeat database via its
API.</para>

<para>A few flags control the operation of
<application>freshmeat-submit</application> itself.</para>

<variablelist>
<varlistentry>
<term>-q, --query</term>
<listitem>
<para>Query the specified project. Delivers to standard output a job
card describing the project metadata that can be edited and fed back
to this tool. The data with release rather than project scope is for
the most recent release.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>-d, --delete</term>
<listitem>
<para>Delete the specified release rather than submitting it.  With
this option, all data other than Project and Release are
ignored. Note: only works if the release has been submitted but not
yet passed by a moderator; if the release is already posted, invoking
this mode will throw an error.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>-n, --no-stdin</term>
<listitem>
<para>Process command-line options only; don't read data from
standard input.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>-N, --dryrun</term>
<listitem>
<para>Generate JSON, but don't ship any modification requests to Freshmeat.
Useful for debugging in combination with -V.  Note, this mode may generate
requests which read data from Freshmeat in order to get permalink data.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>-V, --verbose</term>
<listitem>
<para>Enable verbose debugging of the transaction.  This
option is mainly for developers.</para>
</listitem>
</varlistentry>
</variablelist>

<para>Release information is accepted from sources in the
following order:</para>

<orderedlist>
<listitem>
<para>An RFC-2822-format job card, strongly resembling an ordinary
email message, on standard input.  The message header fields each
specify a particular item of release information; the body (if
present) becomes the change announcement text. Within URL fields, the
string ${version} will be replaced with the contents of the Version
field.</para>
</listitem>

<listitem>
<para>Command-line switches.</para>
</listitem>
</orderedlist>

<para>Here is a table of metadata fields and their 
corresponding command-line switches:</para>

<informaltable>
<tgroup cols='5' rowsep='1'>
<thead>
<row>
  <entry>Message field</entry>
  <entry>Scope</entry>
  <entry>Short switch</entry>
  <entry>Long switch</entry>
  <entry>Explanation</entry>
</row>
</thead>
<tbody>

<row>
<entry>Project:</entry>      <entry>Project</entry>
<entry>-p</entry><entry>--project</entry>
<entry>
<para>Name of the project (freshmeat shortname) to operate on. You cannot
change the project-name attribute with this program; to do that, you
need to use the Freshmeat web interface.</para>
</entry>
</row>

<row>
<entry>Summary:</entry>  <entry>Project</entry>
<entry>-S</entry><entry>--summary</entry>
<entry>
<para>One-line summary of the project.</para>
</entry>
</row>

<row>
<entry>Description:</entry>  <entry>Project</entry>
<entry>-D</entry><entry>--description</entry>
<entry>
<para>Multiline description of the project. (Use RFC-822-style continuation 
lines)</para>
</entry>
</row>

<row>
<entry>License-List:</entry>  <entry>Project</entry>
<entry>-L</entry><entry>--license-list</entry>
<entry>
<para>Specify the licenses under which the project is issued.  This
may be a comma-separated list.</para>
</entry>
</row>

<row>
<entry>Project-Tag-List:</entry><entry>Release</entry>
<entry>-T</entry><entry>--project-tag-list</entry>
<entry>
<para>Tags to attach to this project. May be a comma-separated list.</para>
</entry>
</row>

<row>
<entry>Version:</entry>	     <entry>Release</entry>
<entry>-v</entry><entry>--version</entry>
<entry>
<para>Version string to be associated with the release.</para>
</entry>
</row>

<row>
<entry>Changes:</entry>      <entry>Release</entry>
<entry>-c</entry><entry>--changes</entry>
<entry>
<para>The Changes field. If no Changes field or option is already
present, the changes text is taken from the body of the RFC-822
message on standard input.</para>
</entry>
</row>

<row>
<entry>Release-Focus:</entry><entry>Release</entry>
<entry>-r</entry><entry>--release-focus</entry>
<entry>
<para>Purpose of this release.  See the table of release-focus types 
below.</para>
</entry>
</row>

<row>
<entry>Release-Tag-List:</entry> <entry>Release</entry>
<entry>-t</entry><entry>--tag-list</entry>
<entry>
<para>Tags to attach to this release. May be a comma-separated list.</para>
</entry>
</row>

<row>
<entry>Hide:</entry>         <entry>Release</entry>
<entry>-x</entry><entry>--hide</entry>
<entry>
<para>If this field is present and has the value &ldquo;Y&rdquo;, this
release will not be visible on the project page.</para>
</entry>
</row>

</tbody>
</tgroup>
</informaltable>

<para>Additionally, you can specify tagged URL fields for the
Freshmeat project record with header lines ending in "-URL:".  The tag
will be the header with the "-URL:" suffix stripped off. Some examples
of how to set frequently-used URL types:</para>

<informaltable>
<tgroup cols='3' rowsep='1'>
<thead>
<row>
  <entry>Message field</entry>
  <entry>Tag</entry>
  <entry>Usage</entry>
</row>
</thead>
<tbody>

<row>
  <entry>Website-URL:</entry>
  <entry>Website</entry>
  <entry>Project website home page.  If you specify this, it will be used to 
  activate the "More Information" link and Home icon on the project page.</entry>
</row>

<row>
  <entry>Download-URL:</entry>
  <entry>Download</entry>
  <entry>Preferred download URL.  If you specify this, it will be used to 
  activate the "Download" link anf foppy-disk on the project page.</entry>
</row>

<row>
  <entry>Tar/GZ-URL:</entry>
  <entry>Tar/GZ</entry>
  <entry>tar archive compressed with gzip</entry>
</row>

<row>
  <entry>Tar/BZ-URL:</entry>
  <entry>Tar/BZ</entry>
  <entry>tar archive compressed with bzip</entry>
</row>

<row>
  <entry>Changelog-URL</entry>
  <entry>Changelog</entry>
  <entry>project change log</entry>
</row>

</tbody>
</tgroup>
</informaltable>

<para>Note that the list of URLs you ship does not merely add to the 
existing list but overwrites it - that is how you delete old URLs
which are no longer valid.</para>

<para>The Summary, Description, License-List, Project-Tag-List and all
URL fields, when specified, actually change the record for the
project.  Only the Tag-List, Changes, Version, Release-Focus, and Hide
fields are actually stored for each version.</para>

<para>Here are the release-focus types.  Either the string or the
integer is acceptable.  Case of the string is significant.</para>

<informaltable>
<tgroup cols='2' rowsep='1'>
<tbody>
<row><entry>Initial freshmeat announcement</entry><entry>1</entry></row>
<row><entry>Documentation</entry><entry>2</entry></row>
<row><entry>Code cleanup</entry><entry>3</entry></row>
<row><entry>Minor feature enhancements</entry><entry>4</entry></row>
<row><entry>Major feature enhancements</entry><entry>5</entry></row>
<row><entry>Minor bugfixes</entry><entry>6</entry></row>
<row><entry>Major bugfixes</entry><entry>7</entry></row>
<row><entry>Minor security fixes</entry><entry>8</entry></row>
<row><entry>Major security fixes</entry><entry>9</entry></row>
</tbody>
</tgroup>
</informaltable>

<para>The following elements of Freshmeat project metadata cannot yet
be modified using this tool: <varname>name</varname>,
<varname>translation list</varname>, <varname>programming
language list</varname>, <varname>operating system
list</varname>, <varname>approved screenshots</varname>,
and dependency records.</para>

<para>Support for updating all these elements except
<varname>name</varname> is planned in future releases.</para>
</refsect1>

<refsect1><title>USAGE</title>

<para>Here is an example of a release-information record that could be
fed to <application>freshmeat-submit</application> on standard input:</para>

<programlisting>
Project: doclifter
Version: 1.1
Release-Focus: Major feature enhancements
Hide: N
Website-URL: http://www.catb.org/~esr/doclifter/
Tar/GZ-URL: http://www.catb.org/~esr/doclifter/doclifter-${version}.tar.gz

Fixed a bug in conditional evaluation that twadmin(8) tickled.  Better
detection of pure inclusions. Better blank-section elimination.
Kleene star recognized as ... synonym in command synopses.  Correct
some bugs in semantic-hint collection.  Recognize Qt manual pages and
use their conventions.  Better lifting of mandoc-generated
pages. Translate groff-style \[...] escapes, flag unknown ones.  Can
now parse K&amp;R style function prototypes as well as ANSI ones. This
version lifts 96% of 9829 manual pages in a full Red Hat 9
installation with Fedora updates to *validated* XML-DocBook.
</programlisting>
</refsect1>

<refsect1><title>WARNING</title>
<para>Since this program was first written, Freshmeat has changed its
data API significantly. While we have attempted to maintain backward
compatibility, the data model has changed in significant ways.</para>

<para>There is no longer a Branch attribute.</para>

<para>The old Release-Focus field is gone.  As a special case, this
pragram will validate it and use it to fill in the project tags list.</para>

<para>The old License field is now License-List and can take a
comma-separated list of licenses.</para>

<para>All the old URL fields are gone.  They're replaced by
the general mechanism for pairing URLs with labels.</para>

<para>Earlier versions parsed RPM specfiles. This was poor
separation of function and has been removed. That responsibility
belong to the human or program generating the job card.</para>
</refsect1>

<refsect1><title>FILES</title>

<variablelist>
<varlistentry>
<term><filename>~/.netrc</filename></term>
<listitem>
<para><application>freshmeat-submit</application> expects to find your
Freshmeat authorization tag here.  The correct form for an entry looks like
this:</para>

<screen>
machine freshmeat
     account &lt;your_api_auth_code&gt;
</screen>

<para>For security, make sure your <filename>~/.netrc</filename> file
is not world-readable; we recommend doing <command>chmod 600
~/.netrc</command>.</para>
</listitem>
</varlistentry>
</variablelist>

</refsect1>
<refsect1><title>RETURN VALUES</title>

<para>0 on success, 1 on failure.  In case of failure, any error message
passed back by the Freshmeat API is issued to standard error.</para>

</refsect1>
<refsect1 id='author'><title>AUTHORS</title> 
<para>Eric S. Raymond <email>esr@thyrsus.com</email>.</para> 
</refsect1> 
</refentry>
